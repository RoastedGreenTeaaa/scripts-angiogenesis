Clear[mySMA, ErrorBar, DISTANCE, BRANCH, BRANCHv, PASSING, VelocityBranch, ForwardBackwardBranch, DistanceBranch, TIPDURATION, Result, CtrKOExportTip, ExportPassing, ExportSprout];
ErrorBar[x_, l0_] := Module[{myMean, mySE, mean, se, k},
    myMean[r0_] := Module[{m1}, 
        Table[m1 = DeleteCases[m, ""]; 
        If[Length[m1] > 0, Mean[m1], ""], {m, Transpose[r0]}]
        ];
    mySE[r0_] := Module[{m2}, 
        Table[m2 = DeleteCases[m, ""]; 
        If[Length[m2] > 1, Sqrt[Variance[m2]*((Length[m2] - 1)/Length[m2])]/Sqrt[Length[m2]], ""], {m, Transpose[r0]}]
        ];
    mean = myMean[x];
    se = mySE[x];
    If[l0 == 11, k = 5, k = 2.5];
    Table[{k (l - (l0 + 1)/2), Around[mean[[l]], se[[l]]]}, {l, l0}]
    ];


mySMA[r_, index_, frame_, cell_] := Module[{blank, sma, r1},
    If[index != 0, blank = Table[{"", ""}, {j, 1, index}];
    Table[sma = Table[r1 = r[[i]][[n ;; n + 2 index]];
       If[MemberQ[r1, {"", ""}], {"", ""}, Mean[r1]], {n, 1, frame- 2*index}];
    Join[blank, sma, blank], {i, cell}], r]
    ];


DISTANCE[SMA_, frame_, cell_] := Module[{SMAi, SMAj, dis, Distance},
    Do[Do[{SMAi, SMAj} = {SMA[[i]], SMA[[j]]};
    dis = Table[If[And[SMAi[[n]] != {"", ""}, SMAj[[n]] != {"", ""}], EuclideanDistance[SMAi[[n]], SMAj[[n]]], ""], {n, 1, frame}];
        Distance[i, j] = dis;
        Distance[j, i] = dis;
        ,{i, j + 1, cell}], {j, 1, cell - 1}];
    Table[Table[Distance[i, j], {j, 1, cell}], {i, 1, cell}]
    ];


BRANCH[SMA_, Distance_, tip1_, tip2_, index_, frame_, cell_, dth_, pos_] := Module[{ID12, t0, x, y, a, branch0, branch, newbranch, xb0, xb, i1, i2},
    ID12[list_] := Module[{max1, max2, l0},
        l0 = DeleteCases[list, ""];
        max1 = RankedMax[l0, 1]; max2 = RankedMax[l0, 2];
        If[max1 != max2, {FirstPosition[list, max1][[1]], FirstPosition[list, max2][[1]]}, Flatten[Position[list, max1]]]
        ];
    t0 = SMA[[tip2]][[frame - index]] - SMA[[tip1]][[index + 1]];
    If[t0[[1]] > 0,
      Table[
          x[i] = Table[If[k != {"", ""}, k - SMA[[tip1]][[index + 1]], {"", ""}], {k, SMA[[i]]}]
      ,{i, 1, cell}];
    a = Normalize[{1, x[tip2][[frame - index]][[2]]/x[tip2][[frame - index]][[1]]}];
    branch0 = Table[Table[If[k != {"", ""}, a . k, ""], {k, x[i]}], {i, 1, cell}],
    Table[y[i] = Table[If[k != {"", ""}, {0, 2 k[[2]]} - k, {"", ""}], {k, SMA[[i]]}], {i, 1, cell}];
    Table[x[i] = Table[If[k != {"", ""}, k - y[tip1][[index + 1]], {"", ""}], {k, y[i]}], {i, 1, cell}];
    a = Normalize[{1, x[tip2][[frame - index]][[2]]/x[tip2][[frame - index]][[1]]}];
    branch0 = Table[Table[If[k != {"", ""}, a . k, ""], {k, x[i]}], {i, 1, cell}]];  
    If[pos == "tip_stalk", branch = branch0,
       If[pos == "stalk", newbranch = {};
          Do[xb0 = Transpose[branch0][[t]];
          xb = DeleteCases[xb0, ""];
          If[Length[xb] > 2,
          {i1, i2} = ID12[xb0];
          If[Distance[[i1]][[i2]][[t]] < dth, {xb0[[i1]], xb0[[i2]]} = {"", ""}], Nothing];
          AppendTo[newbranch, xb0], {t, frame}];
          branch = Transpose[newbranch],
       If[pos == "tip", newbranch = {};
          Do[xb0 = Transpose[branch0][[t]];
          xb = DeleteCases[xb0, ""];
          If[Length[xb] > 2, {i1, i2} = ID12[xb0];
             Table[xb0[[j]] = "", {j, Complement[Range[cell], {i1, i2}]}], Nothing];
          AppendTo[newbranch, xb0], {t, frame}];
          branch = Transpose[newbranch]]]]
   ];


BRANCHv[branch_, frame_, cell_] := Module[{x}, 
    Table[x = branch[[i]]; 
    Table[If[And[x[[n]] != "", x[[n + 1]] != ""], x[[n + 1]] - x[[n]], ""], {n, 1, frame - 1}], {i, 1, cell}]
    ];


PASSING[branch_, vb_, Distance_, frame_, cell_, dth_, l0x_] := Module[{theta, pass, bri, brj, dist, order, p0, pass5, list, list5},
    theta[x_] := If[x >= 0.0, 1, -1];
    Table[pass[i, i] = {}, {i, 1, cell}];
    Do[Do[
        {bri, brj, dist} = {branch[[i]], branch[[j]], Distance[[i]][[j]]};
        order = Table[If[And[bri[[n]] != "", brj[[n]] != "", dist[[n]] < dth], theta[brj[[n]]-bri[[n]]], ""], {n, 1, frame}];
        p0 = Table[If[Or[And[order[[n]] == 1, order[[n + 1]] == -1], And[order[[n]]==-1, order[[n + 1]]==1]], n, Nothing], {n, 1, frame-1}];
        pass[i, j] = p0;
        pass[j, i] = p0
    ,{j, i+1, cell}], {i, 1, cell-1}];
    pass5=Table[Table[Table[If[vb[[i]][[n]] vb[[j]][[n]] < 0, Table[n+k, {k, -l0x, l0x}], Nothing], {n, pass[i,j]}], {j,cell}], {i,cell}];
    Table[Table[list[i, j] = Table[If[vb[[i]][[n]] vb[[j]][[n]] < 0, j, Nothing], {n, pass[i, j]}], {j,cell}], {i,cell}];
    list5 = Table[Flatten[Table[list[i, j], {j, 1, cell}]], {i, 1, cell}];
    {pass5, list5}
    ];


VelocityBranch[pass5_, vb_, list5_, frame_, cell_, l0_] := Module[{pass0, ln, VelocityBranch, vb5b, velocity, set0, set1, vb5m, list},
    Do[pass0 = Flatten[pass5[[i]], 1];
        ln = Length[pass0];
        VelocityBranch = vb[[i]];
        If[ln != 0,
            vb5b[i] = Table[Table[If[And[1<=n<=frame-1, VelocityBranch[[n]] != ""], 
            Abs[VelocityBranch[[n]]], ""], {n, pass0[[k]]}], {k, 1, ln}];
            velocity[i] = Table[Table[If[And[1 <= n <= frame - 1, VelocityBranch[[n]] != ""], 
            VelocityBranch[[n]], ""], {n, pass0[[k]]}], {k, 1, ln}],
        vb5b[i] = {Table["", {n, 1, l0}]}; 
        velocity[i] = {Table["", {n, 1, l0}]}]
    ,{i, 1, cell}];
    set0 = Transpose[Flatten[Table[vb5b[i], {i, 1, cell}], 1]];
    vb5m = Table[set1 = DeleteCases[set0[[l]], ""];
    If[set1 != {}, Mean[set1], ""], {l, 1, l0}];
    {Table[velocity[i], {i, cell}], vb5m}
    ];


ForwardBackwardBranch[velocity_, list5_, T_, cell_, l0_] := Module[{lh, v0, lst, forward, backward, MEAN},  
    MEAN[v_] := Module[{fw1, fw2, fw3, mean, sd, num},
        fw1 = Flatten[Table[v[i], {i, cell}], 1];
        If[Length[fw1] == 0, mean = Table["", {n, l0}]; sd = Table["", {n, l0}]; num = Table[0, {n, l0}],
            If[Or[Length[fw1] == 1, Length[fw1] == 2],
            fw2 = Transpose[Table[f[[2]], {f, fw1}]];
            fw3 = Abs[Table[DeleteCases[f, ""], {f, fw2}]];
            mean = Map[Mean, fw3]; sd = Table["", {n, l0}]; 
            num = Map[Length, fw3],
            fw2 = Transpose[Table[f[[2]], {f, fw1}]];
            fw3 = Abs[Table[DeleteCases[f, ""], {f, fw2}]];
            mean = Map[Mean, fw3];
            sd = Map[StandardDeviation, fw3];
            num = Map[Length, fw3]]];
        {mean, sd, num}
        ];
  lh = IntegerPart[(l0 + 1)/2];
  Do[
      v0 = velocity[[i]];
      lst = list5[[i]];
      forward[i] = Table[If[And[v0[[l]][[lh]] != "", v0[[l]][[lh]] > 0], {T[[i]] <> "_" <> T[[lst[[l]]]], v0[[l]]}, Nothing], {l, Length[v0]}];
      backward[i] = Table[If[And[v0[[l]][[lh]] != "", v0[[l]][[lh]] < 0], {T[[i]] <> "_" <> T[[lst[[l]]]], v0[[l]]}, Nothing], {l, Length[v0]}];
   ,{i, cell}];
  {MEAN[forward], MEAN[backward]}
  ];


DistanceBranch[pass5_, Distance_, list5_, frame_, cell_, l0_] := Module[{pass0, ln, d0, dist5, j, set0, set1, dist5m, list},
    Do[
        pass0 = Flatten[pass5[[i]], 1];
        ln = Length[pass0];
        If[ln != 0, dist5[i] = Table[j=list5[[i]][[k]];d0 = Distance[[i]][[j]];
        Table[If[And[1 <= n <= frame - 1, d0[[n]] != ""], d0[[n]], ""], {n, pass0[[k]]}], {k,ln}],
        dist5[i] = {Table["", {n, 1, l0}]}]
    ,{i,cell}];
    set0 = Transpose[Flatten[Table[dist5[i], {i, 1, cell}], 1]];
    dist5m = Table[set1 = DeleteCases[set0[[l]], ""];
    If[set1 != {}, Mean[set1], ""], {l, 1, l0}];
    dist5m
    ];


TIPDURATION[branch_, pass5_, frame_, index_] := Module[{myPos, brT, displacement, tipcell, tip0, k, tipnum, passingnum},
    myPos[list_] := FirstPosition[list, Max[DeleteCases[list, ""]]][[1]];
    brT = Transpose[branch];
    displacement = Max[DeleteCases[brT[[frame - index]], ""]];
    tipcell = Table[myPos[brT[[t]]], {t, frame}];
    tip0 = Flatten[Table[Position[x, Max[DeleteCases[x, ""]]], {x, brT}]];
    k = 1;
    Table[If[tip0[[n + 1]] != tip0[[n]], k = k + 1, Nothing], {n, Length[tip0]-1}];
    tipnum = k;
    passingnum = Length[Flatten[pass5, 2]]/2;
    {N[passingnum], N[5*frame/tipnum], displacement, displacement/tipnum}
    ];


Result[Type_, TipStalk_] := Module[{dth = 20, idx = {0, 2}, fn, files, tip1, tip2, sl, l0x, l0, pm5, data, T, cell, frame, r, crd,
    SMA, Distance, branch, vb, pass5, list5, velocity, vb5m, allpairvb, FWBranch, BWBranch, DistBranch, TipDuration},  
    fn = Transpose[Import["Tip_List.xlsx", {"Data", Type}]];
    files = StringTake[fn[[1]], {2, -2}];
    {tip1, tip2} = {IntegerPart[fn[[2]]], IntegerPart[fn[[3]]]};
    sl = Length[files];
    If[Type == "Ring_assay", l0x = 10, l0x = 5];
    l0 = l0x*2 + 1;
    pm5 = {Table[n, {n, -l0x, l0x}]};
    Do[
        data = Import[Type <> "\\" <> files[[s]] <> ".xlsx"][[1]];
        T[s] = DeleteCases[data[[1]][[2 ;; All]], ""];
        cell[s] = Length[DeleteCases[data[[1]][[2 ;; All]], ""]];
        frame[s] = IntegerPart[Last[Transpose[data][[1]]]];
        r[s] = Table[crd = Transpose[{Transpose[data][[2 i]][[2 ;; All]], Transpose[data][[2 i + 1]][[2 ;; All]]}];
        Table[If[xy != {"", ""}, xy, {"", ""}], {xy, crd}], {i,cell[s]}]
    ,{s, 1, sl}];
  
    Do[Do[
        SMA[s, index] = mySMA[r[s], index, frame[s], cell[s]];
        Distance[s, index] = DISTANCE[SMA[s, index], frame[s], cell[s]];
        branch[s, index] = BRANCH[SMA[s, index], Distance[s, index], tip1[[s]], tip2[[s]], index, frame[s], cell[s], dth, TipStalk];
        vb[s, index] = BRANCHv[branch[s, index], frame[s], cell[s]];
        {pass5[s, index], list5[s, index]} = PASSING[branch[s, index], vb[s, index], Distance[s, index], frame[s], cell[s], dth, l0x];    
        {velocity[s, index], vb5m[s, index]} = VelocityBranch[pass5[s, index], vb[s, index], list5[s, index], frame[s], cell[s], l0];   
        {FWBranch[s, index], BWBranch[s, index]} = ForwardBackwardBranch[velocity[s, index], list5[s, index], T[s], cell[s], l0];
        DistBranch[s, index] = DistanceBranch[pass5[s, index], Distance[s, index], list5[s, index], frame[s], cell[s], l0];  
        TipDuration[s, index] = TIPDURATION[branch[s, index], pass5[s, index], frame[s], index]
    , {index, idx}], {s, sl}];
    
    Table[{Table[branch[s, index], {s, sl}], Table[vb[s, index], {s, sl}], Table[pass5[s, index], {s, sl}], 
        Table[vb5m[s, index], {s, sl}], Table[FWBranch[s, index][[1]], {s, sl}], Table[BWBranch[s, index][[1]], {s, sl}], 
        Table[DistBranch[s, index], {s, sl}], Table[TipDuration[s, index], {s, sl}]}, {index, idx}]
    ];
    
    
CtrKOExportTip[Ctr_, KO_, FileName_] := Module[{xctr, xko, label, sprout, j, tip},
    xctr = Transpose[Ctr[[2]][[8]]];
    xko = Transpose[KO[[2]][[8]]];
    label = {"Passing time of cells in branch elongation", "Tip duration", "Vessel elongation", "Elongation drive"};
    tip = Table[sprout = Join[{""}, Table["Sprout-" <> ToString[i], {i, Length[xctr[[j]]]}]];
    Join[{{label[[j]], "", ""}}, Transpose[{sprout, Join[{"Control"}, xctr[[j]]], Join[{"VE-cadherin KO"}, xko[[j]]]}]], {j, 4}];
    Export[FileName, {"Fig_4H" -> tip[[1]], "Fig_4I" -> tip[[2]], "Fig_4J" -> tip[[3]], "Fig_4K" -> tip[[4]]}]
    ];


ExportPassing[result_, FileName_] := Module[{myBin, PassingNotPassing, notpassing, passing, notpassingmean, 
     passingmean, notpassingbin, passingbin, sl, ln, sproutlabel1, sproutlabel2, label, MeanSpeed, NotPassing, Passing},
     myBin[list_] := Module[{bin, totalbin, freq},
        bin = Map[Function[x, BinCounts[x, {0, 10, 0.25}]], list];
        totalbin = Total[bin];
        freq = N[totalbin/Total[totalbin]];
        Join[bin, {totalbin}, {freq}]
        ]; 
     PassingNotPassing[x_] :=  Module[{vb0, pass5, sl2, len, passing0, m, pass0, pass1, notpassing0},
        vb0 = x[[2]][[2]];
        pass5 = x[[2]][[3]];
        sl2 = Length[vb0];
        len = Length[vb0[[1]][[1]]];
        passing0 = Table[m = 0;
            Flatten[Table[m = m + 1;
            pass0 = Sort[DeleteDuplicates[Flatten[k]]];
            pass1 = Table[
            If[Or[n >= len, n <= 0], Nothing, n], {n, pass0}];      
            Abs[DeleteCases[vb0[[s]][[m]][[pass1]], ""]], {k, pass5[[s]]}]], {s, sl2}];
        notpassing0 = Table[m = 0;
        Flatten[Table[m = m + 1; 
        pass0 = Complement[Range[len], Sort[DeleteDuplicates[Flatten[k]]]]; 
        pass1 = Table[If[Or[n >= len, n <= 0], Nothing, n], {n, pass0}];         
            Abs[DeleteCases[vb0[[s]][[m]][[pass1]], ""]], {k, pass5[[s]]}]], {s, sl2}];
     {notpassing0, passing0}
     ];
     {notpassing, passing} = PassingNotPassing[result];    
     notpassingmean = Map[Mean, notpassing];
     passingmean = Map[Mean, passing];
     notpassingbin = myBin[notpassing];
     passingbin = myBin[passing];
     sl = Length[notpassingmean];
     ln = Length[Transpose[notpassingbin]];
     sproutlabel1=Prepend[Table["Sprout-" <> ToString[s], {s, sl}], ""];
     label = Table[ToString[0.25 (i - 1)] <> "\[LessEqual]v<" <> ToString[0.25 i], {i, 1, ln}];
     sproutlabel2 = Join[Table["Sprout-" <> ToString[s], {s, sl}], {"SUM", "Relative frequency"}]; 
     MeanSpeed = Transpose[{sproutlabel1, Prepend[notpassingmean, "Not passing"], Prepend[passingmean, "Passing"]}];
     NotPassing = Prepend[Transpose[Prepend[notpassingbin, label]], Join[{"Speed"}, sproutlabel2]];
     Passing = Prepend[Transpose[Prepend[passingbin, label]], Join[{"Speed"}, sproutlabel2]];
     Export[FileName, {"MeanSpeed" -> MeanSpeed, "NotPassing" -> NotPassing, "Passing" -> Passing}]
     ];


ExportSprout[resultStalk_, resultTip_, FileName_] := Module[{myMean, mySE, Sprout, STALK, TIP, blank, speed, forward, backward, distance, result},
    myMean[r0_] := Module[{m1}, 
        Table[m1 = DeleteCases[m, ""]; 
        If[Length[m1] > 0, Mean[m1], ""], {m, Transpose[r0]}]
        ];
    mySE[r0_] := Module[{m2}, 
        Table[m2 = DeleteCases[m, ""]; 
        If[Length[m2] > 1, 
          Sqrt[Variance[m2]*((Length[m2] - 1)/Length[m2])]/Sqrt[Length[m2]], ""], {m, Transpose[r0]}]
        ];
    Sprout[rs_, rt_, Name_] := Module[{lenT, lenC, TimeLabel, SproutLabel, TipStalkLabel, stalk2, tip2, data},
        lenT = Length[rs[[1]]];
        lenC = Length[rs];
        TimeLabel = If[lenT == 11, Table[-25 + 5 t, {t, 0, lenT - 1}], Table[-30 + 3 t, {t, 0, lenT - 1}]];
        SproutLabel = Join[{"", "", "min"}, Table["Sprout-" <> ToString[i], {i, lenC}], {"Average", "SE"}];
        TipStalkLabel = {Flatten[{"Stalk cells", Table["", {t, lenT - 1}],"Tip cells", Table["", {t, lenT - 1}]}], Flatten[{Name, Table["", {t, 2 lenT - 1}]}]};
        stalk2 = Join[{TimeLabel}, rs, {myMean[rs]}, {mySE[rs]}];
        tip2 = Join[{TimeLabel}, rt, {myMean[rt]}, {mySE[rt]}];
        data = Transpose[Join[TipStalkLabel, Transpose[Join[Transpose[stalk2], Transpose[tip2]]]]];
        Transpose[Join[{SproutLabel}, data]]
        ]; 
    STALK = resultStalk[[1]][[4 ;; 7]];
    TIP = resultTip[[1]][[4 ;; 7]];
    speed = Sprout[STALK[[1]], TIP[[1]], "Total_Mean speed of all cells (\[Mu]m/5min)"];
    forward = Sprout[STALK[[2]], TIP[[2]], "Mean speed of the cells moving forward (\[Mu]m/5min)"];
    backward = Sprout[STALK[[3]], TIP[[3]], "Mean speed of the cells moving backward (\[Mu]m/5min)"];
    distance = Sprout[STALK[[4]], TIP[[4]], "Distance (\[Mu]m)"];
    blank = {Table["", {t, Length[speed[[1]]]}]};
    result = Join[speed, blank, forward, blank, backward, blank, distance];
    Export[FileName, result]
    ]
